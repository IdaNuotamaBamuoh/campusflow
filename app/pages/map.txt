import React, { useCallback, useRef, useEffect, useState } from 'react';
import { View, Text, StyleSheet, Platform } from 'react-native';
import MapView, { Marker, Polyline, PROVIDER_GOOGLE } from 'react-native-maps';
import { Modalize } from 'react-native-modalize';
import { ScrollView } from 'react-native-gesture-handler';
import polyline from '@mapbox/polyline';
import { GOOGLE_MAPS_API_KEY } from '../../env';
import Toast from 'react-native-toast-message';

///////
import routesData from '../data/routes.json';

//

const [routes, setRoutes] = useState(routesData);
///////


//358547

const CarTrackingMapScreen = () => {
  const sheetRef = useRef(null);
  const mapRef = useRef(null);
  const snapTimeoutRef = useRef(null);


  const buffer = 1.015;
  // Road-following routes state for all segments
  const [roadRoutes, setRoadRoutes] = useState({});


  // Map initial region for zooming in on KNUST
  const initialRegion = {
    latitude: 6.6731,
    longitude: -1.5718,
    latitudeDelta: 0.01,
    longitudeDelta: 0.01,
  };
 //6.6775, -1.5400
  const knustBounds = {
    north:  { latitude: 6.6891, longitude: -1.5640 },
    south:  { latitude: 6.6600, longitude: -1.5650 },
    east:   { latitude: 6.6775, longitude: -1.5400 },
    west:   { latitude: 6.6775, longitude: -1.5900 },
    northeast: { latitude: 6.6950, longitude: -1.5400 },
    northwest: { latitude: 6.6895, longitude: -1.5827 },
    southeast: { latitude: 6.6613, longitude: -1.5531 },
    southwest: { latitude: 6.6602, longitude: -1.5843 },

};
  const isInsideKnust= (region) => {
    const { latitude, longitude } = region;

    const latMin = knustBounds.south.latitude;
    const latMax = knustBounds.north.latitude;
    const lonMin = knustBounds.west.longitude;
    const lonMax = knustBounds.east.longitude;

    return latitude >= latMin && latitude <= latMax &&
          longitude >= lonMin && longitude <= lonMax;

  };

  const handleRegionChange = useCallback((region) => {
    if (!isInsideKnust(region)) {
       if (snapTimeoutRef.current) return;

    Toast.show({
      type: 'info',
      text1: 'Out of bounds',
      text2: 'Re-centering to KNUST campus in 5 seconds...',
      visibilityTime: 4000,
    });

    snapTimeoutRef.current = setTimeout(() => {
      mapRef.current?.animateToRegion(initialRegion, 1000);
      snapTimeoutRef.current = null;
    }, 5000);
  } else {
    if (snapTimeoutRef.current) {
      clearTimeout(snapTimeoutRef.current);
      snapTimeoutRef.current = null;
    }
    }
  }, []);


  useEffect(() => {
    sheetRef.current?.open(); // 👈 this will show the modal when the screen loads
  }, []);

  useEffect(() => {
  const fetchDrivers = async () => {
    const { data } = await supabase.from('drivers').select('*');
    setDrivers(data);
  };
  fetchDrivers();

  // Real-time subscription
  const subscription = supabase
    .channel('drivers-updates')
    .on('postgres_changes', { event: '*', schema: 'public', table: 'drivers' }, (payload) => {
      setDrivers((prev) =>
        prev.map((d) => (d.id === payload.new.id ? payload.new : d))
      );
    })
    .subscribe();

  return () => {
    supabase.removeChannel(subscription);
  };
}, []);

  useEffect(() => {
    if (!GOOGLE_MAPS_API_KEY) {
      console.warn('Google Maps API key not found');
      return;
    }
    const routes = {
      phaToMedi,
      ksbToCommercial,
      commercialToKsb,
      bruneiToKsb,
      ksbToBrunei,
    };
    Object.entries(routes).forEach(async ([key, coords]) => {
      if (!coords || coords.length < 2) return;
      const origin = `${coords[0].latitude},${coords[0].longitude}`;
      const destination = `${coords[coords.length-1].latitude},${coords[coords.length-1].longitude}`;
      const waypoints = coords.slice(1, -1)
        .map(coord => `${coord.latitude},${coord.longitude}`)
        .join('|');
      const url = `https://maps.googleapis.com/maps/api/directions/json?origin=${origin}&destination=${destination}${waypoints ? `&waypoints=${waypoints}` : ''}&key=${GOOGLE_MAPS_API_KEY}&mode=driving`;
      try {
        const response = await fetch(url);
        const data = await response.json();
        if (data.routes && data.routes.length) {
          const points = polyline.decode(data.routes[0].overview_polyline.points);
          const routeCoords = points.map(([latitude, longitude]) => ({ latitude, longitude }));
          setRoadRoutes(prev => ({ ...prev, [key]: routeCoords }));
        }
      } catch (e) {
        console.error(`Failed to fetch Google Directions route for ${key}`, e);
      }
    });
  }, []);

  const destination = 'KNUST Campus';
  const eta = '8 mins';

  const handleSheetChange = useCallback(index => {
    console.log('Bottom sheet index:', index);
  }, []);

  const handleDriverTap = (driver) => {
    setSelectedDriver(driver);

    // Highlight the driver's route
    if (driver.route && roadRoutes[driver.route]) {
      setActiveRoute(roadRoutes[driver.route]);
    }

    sheetRef.current?.open(); // Show bottom sheet
  };


  if (Platform.OS === 'web') {
    return (
      <View style={styles.container}>
        <Text style={{ color: 'red', textAlign: 'center', marginTop: 40 }}>
          Map and trip info are only available on mobile (iOS/Android). Please use a mobile device or emulator.
        </Text>
      </View>
    );
  }


  // Bus stops
  const busStops = [
    { name: 'Chemistry Bus Stop', coords: { latitude: 6.674460836771705, longitude: -1.5675313362638799 } },
    { name: 'Pharmacy Bus Stop', coords: { latitude: 6.674798061367296, longitude: -1.5664588657975724 } },
    { name: 'Gaza Bus Stop', coords: { latitude: 6.6865229413454275, longitude: -1.5569190206007884 } },
    { name: 'Medical Village Bus Stop', coords: { latitude: 6.680091975715447, longitude: -1.5491368884918577 } },
    { name: 'Commercial Area Bus Stop', coords: { latitude: 6.6827890091797055, longitude: -1.577008216340791 } },
    { name: 'KSB Bus Stop', coords: { latitude: 6.669327266771381, longitude: -1.5671773386029446 } },
    { name: 'Hall 7 A Bus Stop', coords: { latitude: 6.6792880505895855, longitude: -1.572800620593267 } },
    { name: 'Hall 7 B Bus Stop', coords: { latitude: 6.679633325049614, longitude: -1.572970774312712 } },
    { name: 'Prempeh Lib Bus Stop', coords: { latitude: 6.6750018341728, longitude: -1.5723240108641996 } },
    { name: 'Brunei Bus Stop', coords: { latitude: 6.670467948134247, longitude: -1.5741485986620063 } },
    { name: 'Casely Hayford (SRC) Bus Stop', coords: { latitude: 6.6752288540317455, longitude: -1.567886171892303 } },
  ];

  // Polylines for routes
  const phaToMedi = [
    { latitude: 6.674798061367296, longitude: -1.5664588657975724 },
    { latitude: 6.6794898311886355, longitude: -1.565672810858718 },
    { latitude: 6.684910913245838, longitude: -1.5609393856212919 },
    { latitude: 6.6865229413454275, longitude: -1.5569190206007884 },
    { latitude: 6.684905289760743, longitude: -1.5533919504820606 },
    { latitude: 6.682420454521385, longitude: -1.5500889489896 },
    { latitude: 6.680091975715447, longitude: -1.5491368884918577 },
  ];
  const ksbToCommercial = [
    { latitude: 6.669327266771381, longitude: -1.5671773386029446 },
    { latitude: 6.6752288540317455, longitude: -1.567886171892303 },
    { latitude: 6.675139472277061, longitude: -1.5698682358341896 },
    { latitude: 6.677545389134, longitude: -1.5708594475982072 },
    { latitude: 6.6792880505895855, longitude: -1.572800620593267 },
    { latitude: 6.682135956289475, longitude: -1.576494876409622 },
    { latitude: 6.6827890091797055, longitude: -1.577008216340791 },
  ];
  const commercialToKsb = [
    { latitude: 6.6827890091797055, longitude: -1.577008216340791 },
    { latitude: 6.682135956289475, longitude: -1.576494876409622 },
    { latitude: 6.679633325049614, longitude: -1.572970774312712 },
    { latitude: 6.677545389134, longitude: -1.5708594475982072 },
    { latitude: 6.6752288540317455, longitude: -1.567886171892303 },
  ];
  const bruneiToKsb = [
    { latitude: 6.670467948134247, longitude: -1.5741485986620063 },
    { latitude: 6.6750018341728, longitude: -1.5723240108641996 },
    { latitude: 6.675147601630366, longitude: -1.5692894023140846 },
    { latitude: 6.674460836771705, longitude: -1.5675313362638799 },
    { latitude: 6.669327266771381, longitude: -1.5671773386029446 },
  ];
  const ksbToBrunei = [
    { latitude: 6.669327266771381, longitude: -1.5671773386029446 },
    { latitude: 6.6752288540317455, longitude: -1.567886171892303 },
    { latitude: 6.6750018341728, longitude: -1.5723240108641996 },
    { latitude: 6.670467948134247, longitude: -1.5741485986620063 },
  ];

  return (
    <View style={styles.container}>
      {/* Map Section */}
      <MapView
        ref={mapRef}
        style={styles.map}
        initialRegion={initialRegion}
        onRegionChangeComplete={handleRegionChange}
        minDelta={0.005}
        maxDelta={0.03}
        minZoomLevel={14.4}
        maxZoomLevel={19}
        scrollEnabled={true}
        zoomEnabled={true}
        pitchEnabled={false}
        rotateEnabled={false}
        provider={PROVIDER_GOOGLE}
      >
        {/* Bus Stop Markers */}
        {busStops.map((stop, idx) => (
          <Marker
            key={stop.name}
            coordinate={stop.coords}
            title={stop.name}
            pinColor="#29722F"
          />
        ))}
        {/* Road-following polylines for all routes */}
        {roadRoutes.phaToMedi && roadRoutes.phaToMedi.length > 0 && (
          <Polyline coordinates={roadRoutes.phaToMedi} strokeColor="#FF5733" strokeWidth={5} />
        )}
        {roadRoutes.ksbToCommercial && roadRoutes.ksbToCommercial.length > 0 && (
          <Polyline coordinates={roadRoutes.ksbToCommercial} strokeColor="#29722F" strokeWidth={5} />
        )}
        {roadRoutes.commercialToKsb && roadRoutes.commercialToKsb.length > 0 && (
          <Polyline coordinates={roadRoutes.commercialToKsb} strokeColor="#29722F" strokeWidth={5} />
        )}
        {roadRoutes.bruneiToKsb && roadRoutes.bruneiToKsb.length > 0 && (
          <Polyline coordinates={roadRoutes.bruneiToKsb} strokeColor="#007AFF" strokeWidth={5} />
        )}
        {roadRoutes.ksbToBrunei && roadRoutes.ksbToBrunei.length > 0 && (
          <Polyline coordinates={roadRoutes.ksbToBrunei} strokeColor="#007AFF" strokeWidth={5} />
        )}
        {/* Optionally, keep the original straight lines for reference: */}
        {/* <Polyline coordinates={phaToMedi} strokeColor="#FF5733" strokeWidth={2} />
        <Polyline coordinates={ksbToCommercial} strokeColor="#29722F" strokeWidth={2} />
        <Polyline coordinates={commercialToKsb} strokeColor="#29722F" strokeWidth={2} />
        <Polyline coordinates={bruneiToKsb} strokeColor="#007AFF" strokeWidth={2} />
        <Polyline coordinates={ksbToBrunei} strokeColor="#007AFF" strokeWidth={2} /> */}
      </MapView>
      {drivers.map(driver => (
        <Marker
          key={driver.id}
          coordinate={{ latitude: driver.latitude, longitude: driver.longitude }}
          title={driver.name}
          description={`Route: ${driver.route}`}
          onPress={() => handleDriverTap(driver)}
        />
      ))}

      {/* Modalize Bottom Sheet Panel */}
      <Modalize
        ref={sheetRef}
        modalHeight={400}
        handleStyle={styles.handleIndicator}
        adjustToContentHeight={false}
      >
        <View style={styles.sheetContent}>
          <Text style={styles.header}>🚘 Trip Info</Text>
          <Text>📍 Destination: {destination}</Text>
          <Text>⏱ ETA: {eta}</Text>
          <Text>📦 Package Type: Documents</Text>
          <Text>🚦 Status: En Route</Text>
          <Text>🛣 Distance: 4.3 km</Text>
        </View>
      </Modalize>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  map: {
    ...StyleSheet.absoluteFillObject,
  },
  sheetContent: {
    padding: 20,
    backgroundColor: '#f5f5f5', // more visible
    flexGrow: 1,
    elevation: 10,
    zIndex: 10,
  },
  handleIndicator: {
    width: 40,
    height: 5,
    backgroundColor: '#ccc',
    borderRadius: 3,
    alignSelf: 'center',
    marginVertical: 8,
  },
  header: {
    fontSize: 20,
    fontWeight: 'bold',
    marginBottom: 10,
  },
  // absoluteSheet: removed for Modalize
});

export default CarTrackingMapScreen;